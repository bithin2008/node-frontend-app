//typo

@use './../abstracts/mixin' as *;
@use "sass:list" as *;
@use "sass:math" as *;


.material-symbols-outlined {
  font-size: 1.5em;
  vertical-align: middle;
}

:root{
  --fs-root: 18px;
  --ff-text: 'DM Sans', sans-serif;
}

@media(min-width: 2000px){
  :root{
    --fs-root: 20px;
    // font-size: calc(var(--fs-root*1.6)em) ;
  }
}
@media(max-width:1600px){
  :root {
    --fs-root: 16px;
    // font-size: var(--fs-root)*1.4;
  }
}
@media(max-width:1400px){
  :root {
    --fs-root: 15px;
    // font-size: var(--fs-root)*1.3;
}
}
@media(max-width:1024px){
  :root {
    --fs-root: 13px;
    // font-size: var(--fs-root)*1.2
}
}



$allFontWeight:(
    l   :  300,  // light
    r   :  400,  // regular
    m   :  500,  // regular
    sb  :  600,  // Semi bold
    b   :  700,  // bold
    eb  :  800   // extra bold
);

@mixin fw($key) {
    font-weight: map-get($allFontWeight, $key);
}

// //-- FONT WEIGHT CLASS --//
@each $fwName, $fwValue in $allFontWeight{
    .fw--#{$fwName}{
        font-weight: $fwValue;
    }
}

$allFontSize:(
   1  :  (40, 50),
   2  :  (30, 35),
   3  :  (25, 30),
   4  :  (18, 24),
   5  :  (16, 20),
   6  :  (14, 16),
   7  :  (12, 14),
   8  :  (8, 10)
);

// //-- FONT SIZE CLASS --//
@each $fsClass, $fsValue in $allFontSize{
    .h#{$fsClass}{
      @include clamp('font-size', nth($fsValue, 1), (nth($fsValue, 2) * 1), 1920);
      //line-height: max(1.1, 1.0 + (div(($fsClass) - 1, 10)));
      line-height: inherit;
    }
}


.descc {
    line-height: 1.6;
    & > * + *{
      margin-top: 1em;
    }
}

.h1{
  line-height: 1.2;
}

.h2{
  line-height: 1.2;
}

.h3{
  line-height: 1.25;
}

.h4{
  line-height: 1.35;
}

.h5{
  line-height: 1.5;
}

.h7{
  line-height: 1.5;
}

.h8{
  line-height: 1.6;
}
// .p{
//   font-size: 22px;
//   line-height: 1.7;
// }
.p{
  font-size: 1rem;
}

.h4X{
  font-size: 35px;
  @media (max-width: 575px){
    font-size: 22px;
    line-height: 1.2;
  }
}